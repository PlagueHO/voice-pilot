name: Delete Infrastructure

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      resource_token:
        required: true
        type: string
      retain_resources:
        required: true
        type: boolean
      azure_location:
        required: false
        type: string
    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true

permissions:
  contents: read
  id-token: write

jobs:
  teardown:
    name: Teardown infrastructure via azd down
    runs-on: ubuntu-latest
    steps:
      - name: Initialize teardown environment variables
        id: bootstrap
        run: |
          location="${{ inputs.azure_location }}"
          if [ -z "$location" ] || [ "$location" = 'null' ]; then
            location="eastus2"
          fi
          env_name="voicepilot-${{ inputs.environment }}-${{ inputs.resource_token }}"
          echo "AZURE_LOCATION=$location" >> "$GITHUB_ENV"
          echo "AZURE_ENV_NAME=$env_name" >> "$GITHUB_ENV"

      - name: Skip teardown when retention requested
        if: ${{ inputs.retain_resources }}
        run: echo "Retaining infrastructure for environment $AZURE_ENV_NAME"

      - name: Checkout repository
        if: ${{ !inputs.retain_resources }}
        uses: actions/checkout@v5

      - name: Azure login (OIDC)
        if: ${{ !inputs.retain_resources }}
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Install Azure Developer CLI
        if: ${{ !inputs.retain_resources }}
        run: |
          curl -fsSL https://aka.ms/install-azd.sh | bash
          echo "$HOME/.azd/bin" >> $GITHUB_PATH

      - name: Configure azd authentication
        if: ${{ !inputs.retain_resources }}
        run: |
          azd config set alpha.oidc.enabled true
          azd config set auth.useAzCli true

      - name: Ensure azd environment exists
        if: ${{ !inputs.retain_resources }}
        run: |
          if ! azd env list --output json | jq -e --arg env "$AZURE_ENV_NAME" '.[] | select(.name == $env)' >/dev/null; then
            echo "Environment $AZURE_ENV_NAME not found; nothing to delete."
            exit 0
          fi

      - name: Destroy infrastructure
        if: ${{ !inputs.retain_resources }}
        run: |
          azd down --environment "$AZURE_ENV_NAME" --force --purge --no-prompt
