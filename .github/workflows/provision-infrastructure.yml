name: Provision Infrastructure

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      resource_token:
        required: true
        type: string
      azure_location:
        required: false
        type: string
    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true
    outputs:
      endpoint_url:
        description: Azure AI Foundry endpoint for realtime deployments
        value: ${{ jobs.provision.outputs.endpoint_url }}
      workspace_id:
        description: Resource ID for diagnostics workspace
        value: ${{ jobs.provision.outputs.workspace_id }}
      workspace_customer_id:
        description: Customer ID for diagnostics workspace data collection API
        value: ${{ jobs.provision.outputs.workspace_customer_id }}
      resource_group_name:
        description: Azure resource group created for this environment
        value: ${{ jobs.provision.outputs.resource_group_name }}
      azure_environment_name:
        description: azd environment identifier used during provisioning
        value: ${{ jobs.provision.outputs.azure_environment_name }}
      azure_location:
        description: Azure region used for deployment
        value: ${{ jobs.provision.outputs.azure_location }}

permissions:
  contents: read
  id-token: write

jobs:
  provision:
    name: Provision infrastructure via azd up
    runs-on: ubuntu-latest
    outputs:
      endpoint_url: ${{ steps.capture.outputs.endpoint_url }}
      workspace_id: ${{ steps.capture.outputs.workspace_id }}
      workspace_customer_id: ${{ steps.capture.outputs.workspace_customer_id }}
      resource_group_name: ${{ steps.capture.outputs.resource_group_name }}
      azure_environment_name: ${{ steps.bootstrap.outputs.azure_environment_name }}
      azure_location: ${{ steps.bootstrap.outputs.azure_location }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize location and environment variables
        id: bootstrap
        run: |
          location="${{ inputs.azure_location }}"
          if [ -z "$location" ] || [ "$location" = 'null' ]; then
            location="eastus2"
          fi
          env_name="voicepilot-${{ inputs.environment }}-${{ inputs.resource_token }}"
          echo "AZURE_LOCATION=$location" >> "$GITHUB_ENV"
          echo "AZURE_ENV_NAME=$env_name" >> "$GITHUB_ENV"
          echo "azure_environment_name=$env_name" >> "$GITHUB_OUTPUT"
          echo "azure_location=$location" >> "$GITHUB_OUTPUT"

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Install Azure Developer CLI
        run: |
          curl -fsSL https://aka.ms/install-azd.sh | bash
          echo "$HOME/.azd/bin" >> $GITHUB_PATH

      - name: Configure azd authentication
        run: |
          azd config set alpha.oidc.enabled true
          azd config set auth.useAzCli true

      - name: Create or refresh azd environment
        run: |
          if azd env list --output json | jq -e --arg env "$AZURE_ENV_NAME" '.[] | select(.name == $env)' >/dev/null; then
            azd env refresh --environment "$AZURE_ENV_NAME" || true
          else
            azd env new "$AZURE_ENV_NAME" --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} --location "$AZURE_LOCATION" --no-prompt
          fi

      - name: Provision infrastructure
        run: |
          azd up --environment "$AZURE_ENV_NAME" --location "$AZURE_LOCATION" --no-prompt

      - name: Capture provisioning outputs
        id: capture
        run: |
          azd env get-values --environment "$AZURE_ENV_NAME" > env-values.txt
          endpoint=$(grep '^AZURE_OPENAI_ENDPOINT=' env-values.txt | cut -d'=' -f2- || true)
          workspace_id=$(grep '^LOG_ANALYTICS_WORKSPACE_ID=' env-values.txt | cut -d'=' -f2- || true)
          workspace_customer_id=$(grep '^LOG_ANALYTICS_WORKSPACE_CUSTOMER_ID=' env-values.txt | cut -d'=' -f2- || true)
          resource_group=$(grep '^AZURE_RESOURCE_GROUP=' env-values.txt | cut -d'=' -f2- || true)
          echo "endpoint_url=${endpoint}" >> "$GITHUB_OUTPUT"
          echo "workspace_id=${workspace_id}" >> "$GITHUB_OUTPUT"
          echo "workspace_customer_id=${workspace_customer_id}" >> "$GITHUB_OUTPUT"
          echo "resource_group_name=${resource_group}" >> "$GITHUB_OUTPUT"
          echo "Captured provisioning outputs for $AZURE_ENV_NAME"
